package {{package}};

import static com.github.tomakehurst.wiremock.client.WireMock.aResponse;
import static com.github.tomakehurst.wiremock.client.WireMock.containing;
import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;
import static com.github.tomakehurst.wiremock.client.WireMock.urlPathMatching;
import static java.lang.Objects.requireNonNull;
import static java.lang.System.currentTimeMillis;
import static java.lang.Thread.sleep;

import com.github.tomakehurst.wiremock.client.MappingBuilder;
import com.github.tomakehurst.wiremock.client.ResponseDefinitionBuilder;
import com.github.tomakehurst.wiremock.client.VerificationException;
import com.github.tomakehurst.wiremock.client.WireMock;
import java.time.Duration;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicInteger;

{{#operations}}
public final class {{classname}} {

  private volatile Duration timeout = Duration.ofMillis(5000);
  private AtomicInteger priorityCounter = new AtomicInteger(Integer.MAX_VALUE);
  private String pathPrefix;

  public {{classname}}() {
    this("");
  }

  private {{classname}}(String pathPrefix) {
    this.pathPrefix = pathPrefix;
  }

  public Duration timeout() {
    return timeout;
  }

  public void timeout(Duration timeout) {
    this.timeout = timeout;
  }

  public String urlPrefix() {
    return urlPrefix;
  }

  public static {{classname}} withPathPrefix(String pathPrefix) {
    return new {{classname}}(requireNonNull(pathPrefix);
  }

  {{#operation}}
  public static final class {{operationIdCamelCase}}ResponseStep {
    private {{operationIdCamelCase}}ResponseStep() {}
    public void thenRespondWithInternalServerError() {
      thenRespondWithFailure(500);
    }
    private void thenRespondWithFailure(int status) {
      stubFor(
        com.github.tomakehurst.wiremock.client.WireMock.{{httpMethod.toLowerCase}}(urlPathMatching("{{path}}"))
          .atPriority(priorityCounter.getAndDecrement())
          .willReturn(aResponse().withStatus(status)));
    }
  }

  public {{operationIdCamelCase}}ResponseStep when{{operationIdCamelCase}}() {
    return new {{operationIdCamelCase}}ResponseStep();
  }

  {{/operation}}
}
{{/operations}}
